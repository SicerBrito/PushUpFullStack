// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia.Data;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(DbAppContext))]
    [Migration("20231109174220_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.CarritoCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadCadaProductoEnCarrito")
                        .HasColumnType("int");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<double>("PrecioTotalCarrito")
                        .HasColumnType("double");

                    b.Property<string>("ProductoEnCarrito")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProductosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductosId");

                    b.ToTable("CarritoCompras");
                });

            modelBuilder.Entity("Dominio.Entities.CategoriaProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CategoriaProductos");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .HasColumnType("longtext");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombres")
                        .HasColumnType("longtext");

                    b.Property<double>("NroContacto")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Dominio.Entities.ClienteCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClientesId")
                        .HasColumnType("int");

                    b.Property<int?>("ComprasId")
                        .HasColumnType("int");

                    b.Property<string>("DireccionCliente")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaTransaccion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdClienteFk")
                        .HasColumnType("int");

                    b.Property<int>("IdCompraFk")
                        .HasColumnType("int");

                    b.Property<int>("IdMetodoPagoFk")
                        .HasColumnType("int");

                    b.Property<int?>("PagosId")
                        .HasColumnType("int");

                    b.Property<double>("ValorTotalTransaccion")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ClientesId");

                    b.HasIndex("ComprasId");

                    b.HasIndex("PagosId");

                    b.ToTable("ClienteCompras");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int");

                    b.Property<int?>("ProductosId")
                        .HasColumnType("int");

                    b.Property<double>("ValorUnitUSD")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ProductosId");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("Dominio.Entities.DetalleProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DetallesAdicionalesProducto")
                        .HasColumnType("longtext");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int?>("ProductosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductosId");

                    b.ToTable("DetalleProductos");
                });

            modelBuilder.Entity("Dominio.Entities.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoriaProductosId")
                        .HasColumnType("int");

                    b.Property<int>("IdCategoriaFk")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.Property<int>("StockDisponible")
                        .HasColumnType("int");

                    b.Property<string>("UrlImagen")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaProductosId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdRol")
                        .HasAnnotation("MySqlValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreRol");

                    b.HasKey("Id");

                    b.ToTable("Rol", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Gerente"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Empleado"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Persona"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario")
                        .HasAnnotation("MySqlValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "britodelgado514@gmail.com",
                            Password = "1234",
                            Username = "Sicer Brito"
                        },
                        new
                        {
                            Id = 2,
                            Email = "angedeveloper@gmail.com",
                            Password = "12345",
                            Username = "Angelica Morales"
                        },
                        new
                        {
                            Id = 3,
                            Email = "lisethtorres969@gmail.com",
                            Password = "123456",
                            Username = "Konny Alucemna"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.UsuarioRoles", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("Dominio.Entities.CarritoCompra", b =>
                {
                    b.HasOne("Dominio.Entities.Producto", "Productos")
                        .WithMany("CarritoCompras")
                        .HasForeignKey("ProductosId");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.ClienteCompra", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Clientes")
                        .WithMany("ClienteCompras")
                        .HasForeignKey("ClientesId");

                    b.HasOne("Dominio.Entities.Compra", "Compras")
                        .WithMany("ClienteCompras")
                        .HasForeignKey("ComprasId");

                    b.HasOne("Dominio.Entities.Pago", "Pagos")
                        .WithMany("ClienteCompras")
                        .HasForeignKey("PagosId");

                    b.Navigation("Clientes");

                    b.Navigation("Compras");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.HasOne("Dominio.Entities.Producto", "Productos")
                        .WithMany("Compras")
                        .HasForeignKey("ProductosId");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.DetalleProducto", b =>
                {
                    b.HasOne("Dominio.Entities.Producto", "Productos")
                        .WithMany("DetalleProductos")
                        .HasForeignKey("ProductosId");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.HasOne("Dominio.Entities.CategoriaProducto", "CategoriaProductos")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaProductosId");

                    b.Navigation("CategoriaProductos");
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.HasOne("Dominio.Entities.Usuario", "Usuario")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entities.UsuarioRoles", b =>
                {
                    b.HasOne("Dominio.Entities.Rol", "Roles")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Usuario", "Usuarios")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Dominio.Entities.CategoriaProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Navigation("ClienteCompras");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.Navigation("ClienteCompras");
                });

            modelBuilder.Entity("Dominio.Entities.Pago", b =>
                {
                    b.Navigation("ClienteCompras");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Navigation("CarritoCompras");

                    b.Navigation("Compras");

                    b.Navigation("DetalleProductos");
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsuarioRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
